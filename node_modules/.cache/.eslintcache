[{"/Users/julieserafini/Desktop/advice-generator/src/index.js":"1","/Users/julieserafini/Desktop/advice-generator/src/reportWebVitals.js":"2","/Users/julieserafini/Desktop/advice-generator/src/App.js":"3","/Users/julieserafini/Desktop/advice-generator/src/components/Generator.js":"4"},{"size":535,"mtime":1673902693324,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1673902693326,"results":"7","hashOfConfig":"6"},{"size":162,"mtime":1673903139521,"results":"8","hashOfConfig":"6"},{"size":1280,"mtime":1674579139867,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gbg2bi",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/julieserafini/Desktop/advice-generator/src/index.js",[],[],"/Users/julieserafini/Desktop/advice-generator/src/reportWebVitals.js",[],[],"/Users/julieserafini/Desktop/advice-generator/src/App.js",[],[],"/Users/julieserafini/Desktop/advice-generator/src/components/Generator.js",["23","24"],[],"import React, { useState, useEffect } from 'react';\nimport Image from '../images/icon-dice.svg';\nimport Pattern from '../images/pattern-divider-mobile.svg'\n\nconst Generator = () => {\n    const [advice, setAdvice] = useState(\"\");\n    const [adviceNumber, setAdviceNumber] = useState(Math.floor(Math.random() * 401) + 1);\n    const [error, setError] = useState(null);\n\n    const fetchAdvice = async () => {\n        try {\n        const response = await fetch(`https://api.adviceslip.com/advice/${adviceNumber}`);\n        const data = await response.json();\n        setAdvice(data.slip.advice);\n        setError(null);\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n    useEffect(()=> {\n        fetchAdvice();\n\n    }, [adviceNumber,fetchAdvice])\n   \n\n    const handleClick = async () => {\n        const randomAdviceId = Math.floor(Math.random() * 401) + 1;\n        setAdviceNumber(randomAdviceId);\n\n    }\n\n    return (\n        <div id=\"advice-box\">\n            <h1>advice #{adviceNumber}</h1>\n            <p id=\"text\">{advice}</p>\n            <img id=\"pattern\" src={Pattern} alt=\"Pattern Divider\"/>\n            <button type=\"button\" id=\"btn\" onClick={handleClick}><img id=\"dice\" src={Image} alt=\"Icon Dice\"/></button>\n        </div>\n    )\n}\n\nexport default Generator\n\n\n\n",{"ruleId":"25","severity":1,"message":"26","line":8,"column":12,"nodeType":"27","messageId":"28","endLine":8,"endColumn":17},{"ruleId":"29","severity":1,"message":"30","line":10,"column":11,"nodeType":"31","endLine":19,"endColumn":2},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'fetchAdvice' function makes the dependencies of useEffect Hook (at line 24) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'fetchAdvice' in its own useCallback() Hook.","VariableDeclarator"]